#!/usr/bin/env ruby
require 'github_api'
require 'optparse'

def display_repos(options, repos)
  names = repos.map { |r| r.name }

  names = repos.map { |r| "#{options[:user]}/#{r.name}" } if options[:long_names]

  names.each do |name|
    puts name
  end
end

APP_NAME = File.basename $PROGRAM_NAME

options = {
  archived:      false,
  forked:        false,
  long_names:    false,
  only_archived: false,
  only_forked:   false,
  url_type:      false,
}

OptionParser.new do |opts|
  opts.banner = <<-ENDOFUSAGE
    #{APP_NAME} queries the given user or organisations repositories
    and displays information about them.

      $ #{APP_NAME} --user deanwilson
      ...
      TODO
      alexa-skill-registered-domain
      alexa-skill-webstatuscode
      ...
  ENDOFUSAGE

  opts.on('-a', '--archived',
          'include archived repositories in the output.') { |v| options[:archived] = v }

  opts.on('-f', '--fork',
          'include forked repositories in the output.') { |v| options[:fork] = v }

  opts.on('--long-names',
          'display long names username/repository_name in the output.') { |v| options[:long_names] = v }

  opts.on('--only-archived',
          'only include archived repositories in the output.') { |v| options[:only_archived] = v }

  opts.on('--only-forked',
          'only include forked repositories in the output.') { |v| options[:only_forked] = v }

  opts.on('-u', '--user USER',
          'github user to query.') { |user| options[:user] = user || ARGV[0] }

  opts.on('--url [SCHEME]',
          'URL type to display - clone, git, https or html (default)',
          ' * clone is the git clone https url',
          ' * html is the GitHub web page for the repository',
          ' * ssh is the git clone ssh url') { |s| options[:url_type] = s.nil? ? 'html' : s }

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end.parse!

if options[:user].nil?
  if ARGV[0]
    options[:user] = ARGV[0]
  else
    puts 'Please supply a github username'
    exit 1
  end
end

## do not allow multiple exclusive flags
enabled_exclusives = options.select { |k, v| k.to_s.start_with? 'only_' and v }.keys
if enabled_exclusives.length > 1
  puts "#{APP_NAME}: only one 'only_' option can be supplied"
  exit 1
end

if options[:url_type]
  url_types = %w[clone git html ssh]
  unless url_types.include? options[:url_type]
    puts "#{APP_NAME}: invalid url type: '#{options[:url_type]}' must be one of #{url_types.join(', ')}"
    exit 1
  end
end

config = {
  auto_pagination: true,
  oauth_token:     ENV['GITHUB_TOKEN'],
  user:            options[:user],
}

github = Github.new config

repos = github.repos.list(config).to_a

if options[:url_type]
  repos.each do |repo|
    prop_name = "#{options[:url_type]}_url"
    puts repo.send prop_name
  end

  exit
end

if options[:only_archived]
  repos.select! { |r| r.archived }
  display_repos(options, repos)
  exit
end

if options[:only_forked]
  repos.select! { |r| r.fork }
  display_repos(options, repos)
  exit
end

# ignore non-source repos by default.
repos.reject! { |r| r.archived } unless options[:archived]
repos.reject! { |r| r.fork } unless options[:forked]

display_repos(options, repos)
